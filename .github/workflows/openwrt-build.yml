# This workflow automates the OpenWrt build process based on your provided bash script.
# It clones the necessary repositories, configures feed revisions, and runs the autobuild script.

name: OpenWrt BPI-R4 SD Card Image Build 🛠️

# Define when this workflow should run.
on:
  # Allows you to run this workflow manually from the GitHub Actions UI.
  workflow_dispatch:
  # You can also uncomment the 'push' event to trigger on code changes.
  # push:
  #   branches:
  #     - main
  #     - develop

permissions:
  contents: write
  packages: write
  id-token: write
  pull-requests: write

# Define the jobs that will be executed as part of this workflow.
jobs:
  # checkout-openwrt:
  #   name: Clean and Checkout OpenWrt Repository
  #   runs-on: self-hosted
  #   steps:
  #     - name: Clean OpenWrt Repository
  #       run: |
  #         rm -rf openwrt
  #         rm -rf mtk-openwrt-feeds
  #     - name: Checkout Workflow Repository
  #       uses: actions/checkout@v4

        
  # pull-repositories:
  #   name: Pull Repositories
  #   runs-on: self-hosted
  #   needs: checkout-openwrt
  #   steps:
  #     - name: Clean OpenWrt Repository
  #       run: |
  #         rm -rf openwrt
  #         rm -rf mtk-openwrt-feeds
  #     - name: Pull OpenWrt Repository
  #       run: |
  #         python3 script.py
  #     - name: Switch to OpenWrt 24.10
  #       run: |
  #         cd openwrt
  #         git switch openwrt-24.10
  #     - name: Fetch Repositories
  #       run: |
  #         cd openwrt
  #         git pull
  #         cd ..
  #         cd mtk-openwrt-feeds
  #         git pull


  # configure-openwrt-feeds:
  #   name: Configure MTK Feeds
  #   # Specify the runner environment. 'ubuntu-latest' is a GitHub-hosted runner.
  #   # For very resource-intensive builds, consider using a 'self-hosted' runner.
  #   # needs: pull-repositories
  #   runs-on: self-hosted
  #   needs: pull-repositories
  #   steps:
  #     - name: Configure Feed Revisions
  #       working-directory: openwrt
  #       run: |
  #         # Set shell options for robustness: exit on error, treat unset variables as error, print commands.
  #         set -euo pipefail
  #         echo "packages de909258525bdb3e227c8e6fc1b61329e9a11f62" > ../mtk-openwrt-feeds/autobuild/unified/feed_revision
  #         echo "luci 8d367398d626436e67478da447ce4a4ffe7992e2" >> ../mtk-openwrt-feeds/autobuild/unified/feed_revision
  #         echo "routing d53907107d48331ef38978f7a259bc8eac3765a0" >> ../mtk-openwrt-feeds/autobuild/unified/feed_revision
  #         echo "telephony 44d6355a7b2d69dd25d73913811b421fc504b836" >> ../mtk-openwrt-feeds/autobuild/unified/feed_revision
  #         echo "video 1668ab74cf47cdec753895e70007083ba9c69fe4" >> ../mtk-openwrt-feeds/autobuild/unified/feed_revision

  # start-docker-container:
  #   name: Start Docker Container
  #   runs-on: self-hosted
  #   needs: configure-openwrt-feeds
  #   steps:
  #     - name: Start Docker Container
  #       run: |
  #         docker stop openwrt-imagebuilder || true
  #         docker rm openwrt-imagebuilder || true
  #         docker run --name openwrt-imagebuilder --rm --user $(id -u):$(id -g) --ulimit 'nofile=1024:262144' --volume "$(pwd):/workdir" --workdir '/workdir' -d openwrt/imagebuilder:mediatek-filogic  /bin/bash -c 'sleep infinity'

  # build-mtk-openwrt-feeds:
  #   name: Build MTK Feeds
  #   runs-on: self-hosted
  #   needs: start-docker-container
  #   steps:
  #     - name: Run mtk-openwrt-feeds Autobuild Script
  #       run: |
  #         set -euo pipefail
  #         docker exec openwrt-imagebuilder /bin/bash -c 'cd openwrt && ../mtk-openwrt-feeds/autobuild/unified/autobuild.sh filogic-mac80211-mt7988_rfb-mt7996 log_file=make'

  # defconfig:
  #   name: Configure OpenWrt
  #   runs-on: self-hosted
  #   needs: build-mtk-openwrt-feeds
  #   steps:
  #     - name: Configure OpenWrt
  #       run: |
  #         echo 'CONFIG_PINCTRL_MT7987=y' >> openwrt/target/linux/mediatek/filogic/config-6.6
  #         echo 'CONFIG_COMMON_CLK_MT7987=y' >> openwrt/target/linux/mediatek/filogic/config-6.6
  #     - name: Defconfig
  #       working-directory: openwrt
  #       run: |
  #         docker exec openwrt-imagebuilder /bin/bash -c 'cd openwrt && make defconfig'

  # build-openwrt:
  #   name: Build OpenWrt
  #   # Specify the runner environment. 'ubuntu-latest' is a GitHub-hosted runner.
  #   # For very resource-intensive builds, consider using a 'self-hosted' runner.
  #   # needs: pull-repositories
  #   runs-on: self-hosted
  #   needs: defconfig
  #     # Step 6: Run the main OpenWrt autobuild script.
  #     # allowing the relative path to 'mtk-openwrt-feeds' to work correctly.
  #   steps:
  #     # Step 7: Run the main OpenWrt autobuild script.
  #     # The 'working-directory' ensures the script runs from the 'openwrt' directory,
  #     # allowing the relative path to 'mtk-openwrt-feeds' to work correctly.
  #     - name: Run OpenWrt Build
  #       working-directory: openwrt
  #       run: |
  #         set -euo pipefail
  #         docker exec openwrt-imagebuilder /bin/bash -c 'cd openwrt && make -j$(($(nproc)+1)) V=s'

  upload-artifacts:
    name: Upload Artifacts
    runs-on: self-hosted
    # needs: build-openwrt
    steps:
      # - name: Upload Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: openwrt
      #     path: openwrt/build_dir/target-aarch64_cortex-a53_musl/linux-mediatek_filogic/tmp/openwrt-mediatek-filogic-bananapi_bpi-r4-sdcard.img.gz 
      - name: "Set current date as env variable"
        run: |
          echo "builddate=$(date +'%Y-%m-%d-%H%M')" >> $GITHUB_OUTPUT
        id: version  # this is used on variable path          
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: create_release  
        uses: ncipollo/release-action@v1.18.0
        with:          
          tag: ${{ steps.version.outputs.builddate }}
          name: OpenWRT BPI-R4 SD Card Image ${{ steps.date.outputs.date }}
          artifacts: openwrt/build_dir/target-aarch64_cortex-a53_musl/linux-mediatek_filogic/tmp/openwrt-mediatek-filogic-bananapi_bpi-r4-sdcard.img.gz 
          artifactContentType: application/octet-stream
          draft: false
          prerelease: false


  # clean-up-docker-container-success:
  #   needs: upload-artifacts
  #   runs-on: self-hosted
  #   if: ${{ needs.upload-artifacts.result == 'success' }}
  #   steps:
  #     - name: Clean Up Docker Container
  #       run: |
  #         docker stop openwrt-imagebuilder

  # clean-up-docker-container-failed:
  #   needs: build-openwrt
  #   runs-on: self-hosted
  #   if: ${{ always() && !cancelled() && (needs.build-openwrt.result != 'success') }}
  #   steps:
  #     - name: Clean Up Docker Container
  #       run: |
  #         docker stop openwrt-imagebuilder