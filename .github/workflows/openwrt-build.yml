# This workflow automates the OpenWrt build process based on your provided bash script.
# It clones the necessary repositories, configures feed revisions, and runs the autobuild script.

name: OpenWrt Custom Build 🛠️

# Define when this workflow should run.
on:
  # Allows you to run this workflow manually from the GitHub Actions UI.
  workflow_dispatch:
  # You can also uncomment the 'push' event to trigger on code changes.
  # push:
  #   branches:
  #     - main
  #     - develop

# Define the jobs that will be executed as part of this workflow.
jobs:
  checkout-openwrt:
    name: Checkout OpenWrt Repository
    runs-on: self-hosted
    steps:
      - name: Checkout Workflow Repository
        uses: actions/checkout@v4
        
  pull-repositories:
    name: Pull Repositories
    runs-on: self-hosted
    needs: checkout-openwrt
    steps:
      - name: Pull OpenWrt Repository
        run: |
          python3 script.py
      - name: Switch to OpenWrt 24.10
        run: |
          cd openwrt
          git switch openwrt-24.10


  build-openwrt:
    name: Build OpenWrt Firmware
    # Specify the runner environment. 'ubuntu-latest' is a GitHub-hosted runner.
    # For very resource-intensive builds, consider using a 'self-hosted' runner.
    # needs: pull-repositories
    runs-on: self-hosted
    needs: pull-repositories
    steps:
      - name: Configure Feed Revisions
        working-directory: openwrt
        run: |
          # Set shell options for robustness: exit on error, treat unset variables as error, print commands.
          set -euo pipefail
          ls -ahl
          echo "packages de909258525bdb3e227c8e6fc1b61329e9a11f62" > ../mtk-openwrt-feeds/autobuild/unified/feed_revision
          echo "luci 8d367398d626436e67478da447ce4a4ffe7992e2" >> ../mtk-openwrt-feeds/autobuild/unified/feed_revision
          echo "routing d53907107d48331ef38978f7a259bc8eac3765a0" >> ../mtk-openwrt-feeds/autobuild/unified/feed_revision
          echo "telephony 44d6355a7b2d69dd25d73913811b421fc504b836" >> ../mtk-openwrt-feeds/autobuild/unified/feed_revision
          echo "video 1668ab74cf47cdec753895e70007083ba9c69fe4" >> ../mtk-openwrt-feeds/autobuild/unified/feed_revision

      # Step 6: Run the main OpenWrt autobuild script.
      # allowing the relative path to 'mtk-openwrt-feeds' to work correctly.
      - name: Run mtk-openwrt-feeds Autobuild Script
        run: |
          set -euo pipefail
          docker run --interactive --rm --user $(id -u):$(id -g) --ulimit 'nofile=1024:262144' --volume "$(pwd):/workdir" --workdir '/workdir' openwrt/imagebuilder:mediatek-filogic  /bin/bash -c 'cd openwrt && ../mtk-openwrt-feeds/autobuild/unified/autobuild.sh filogic-mac80211-mt7988_rfb-mt7996 log_file=make'


      # Step 7: Run the main OpenWrt autobuild script.
      # The 'working-directory' ensures the script runs from the 'openwrt' directory,
      # allowing the relative path to 'mtk-openwrt-feeds' to work correctly.
      - name: Run OpenWrt Build
        working-directory: openwrt
        run: |
          set -euo pipefail
          docker run --interactive --rm --user $(id -u):$(id -g) --ulimit 'nofile=1024:262144' --volume "$(pwd):/workdir" --workdir '/workdir' openwrt/imagebuilder:mediatek-filogic  /bin/bash -c 'make -j$(($(nproc)+1)) V=s'

  upload-artifacts:
    name: Upload Artifacts
    runs-on: self-hosted
    needs: build-openwrt
    steps:
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openwrt
          path: openwrt/build_dir/target-aarch64_cortex-a53_musl/linux-mediatek_filogic/tmp/openwrt-mediatek-filogic-bananapi_bpi-r4-sdcard.img.gz
          
